ENCAPSULATION PADA PYTHON

Enkalsulasi adalah sebuah teknik dalam OOP yang mengizinkan untuk menyembunyikan detail dari sebuah atribut dalam sebuah class.

Agar suatu properti ataupun fungsi dari sebuah class tidak dapat diakses secara bebas di luar scope milik suatu class, aku dapat mendefinisikan access modifier (level akses) saat sebuah atribut/fungsi didefinisikan.

Terdapat 2 macam access modifier dalam Python, yakni.

- Public access: dapat aku definisikan dengan secara langsung menuliskan nama dari atribut/ fungsi. Dalam sebuah objek, atribut/fungsi yang bersifat public access dapat diakses di luar scope sebuah class
- Private access: dapat aku definisikan dengan menambahkan double underscore (__) sebelum menuliskan nama dari atribut/fungsi. Dalam sebuah objek, atribut/fungsi yang bersifat private access hanya dapat diakses di dalam scope sebuah class.

# Definisikan Class Karyawan

class Karyawan:
	nama_perusahaan = 'ABC'
	__insentif_lembur = 250000
	def __init__(self, nama, usia, pendapatan):
		self.__nama = nama
		self.__usia = usia
		self.__pendapatan = pendapatan
		self.__pendapatan_tambahan = 0
	def lembur(self):
		self.__pendapatan_tambahan += self.__insentif_lembur
	def tambahan_proyek(self, insentif_proyek):
		self.__pendapatan_tambahan += insentif_proyek
	def total_pendapatan(self):
		return self.__pendapatan _ + self.__pendapatan_tambahan
# buat objek karyawan bernama Aksara
aksara = Karyawan('Aksara', 25,8500000)
#akses ke attribute class karyawan
print(aksara.__class__.nama_perusahaan)
# akan menimbulkan error ketika di run
print(aksara.__nama)


INHERITANCE PADA PYTHON

Inheritance adalah salah satu mekanisme di konsep OO yang mengizinkan aku untuk mendefinisikan sebuah class baru berdasarkan class yang sebelumnya telah dideklarasikan.

Melalui konsep inheritance, sebuah class baru dapat memiliki atribut dan fungsi pada class yang sebelumnya telah didefinisikan. Pada konsep inheritance, atribut/fungsi yang akan diwariskan hanyalah atribut/fungsi dengan access modifier public, atribut/fungsi dengan access modifier private tidak akan diturunkan.

# Definisikan class karyawan (sebagai base class)
class Karyawan:
	nama_perusahaan = 'ABC'
	insentif_lembur = 250000
	def __init_-(self, nama, usia, pendapatan):
		self.nama = nama
		self.usia = usia
		self.pendapatan = pendapatan
		self.pendapatan_tambahan = 0
	def lembur(self):
		self.pendapatan_tambahan += self.insentif_lembur
	def tambahan_proyek(self, insenrif_proyek):
		self.pendapatan_tambahan += insentif_proyek
	def total_pendapatan(self):
		return self.pendapatan + self.pendapatan_tambahan

# buat class turunan (inherit class) dari class karyawan,
# yaitu class analisData
class AnalisData(karyawan):
	def __init__(self, nama, usia, pendapatan):
	#melakukan pemanggilan konstruktur class karyawan
		super().__init__(nama, usia, pendapatan)
# buat class turunan (sebahai inherit class) dari class karyawan,
# yaitu class IlmuwanData
class IlmuwanData(karyawan):
	def __init__(self, nama, usia, pendapatan):
	#melakukan panggilan konstruktor class karyawan
		super().__init__(nama, usia, pendapatan)

# buat objek karyawan yang berkerja sebagai analis data
aksara = AnalisData('Aksara, 25, 85000000)
aksara.lembur()
print(aksara.total_pendapatan)

# buat objek karyawan yang berkerja sebagai ilmuwandata
yuvi = IlmuwanData('yuvi', 29, 13000000)
yuvi.tambahan_proyek(2000000)
print(yuvi.total_pendapatan)
